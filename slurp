#!/bin/bash
# usage:
# mkdir libyui-combined-prototype
# cd    libyui-combined-prototype
# ln -s ../slurp .
# ./slurp

set -x
set -eu

# $1: URL to clone
import() {
    URL="$1"

    export DIR="${URL##*/}"
    CDIR=clones/"$DIR"
    mkdir -p clones
    if ! test -d "$CDIR"; then
        git clone "$URL" "$CDIR"
        pushd "$CDIR"

        # reconnect disjoint history
        if [ "$DIR" = libyui-qt ]; then
            CONNECT_PARENT=$(git rev-list --all --grep revision=42972)
            CONNECT_CHILD=$(git  rev-list --all --grep revision=43019)
            git replace --graft "$CONNECT_CHILD" "$CONNECT_PARENT"
        fi

        # force: work even with the graft above
        # to-subdirectory: put everything to a subdirectory
        # message: rewrite "Merge pull request #99 from abranch" to
        #                  "Merge pull request libyui/libyui-qt#99 from abranch"
        #          so that GitHub automatic hyperlinks point correctly
        git-filter-repo \
            --force \
            --to-subdirectory-filter "$DIR" \
            --message-callback \
            'dir = bytes(os.environ["DIR"], "UTF-8"); return re.sub(br"([^A-Za-z]|^)(#[0-9]{1,4})([^0-9]|$)", br"\1libyui/" + dir + br"\2\3",  message)'


        # delete tags that were a technicality of the svg-git migration
        mapfile -t BROKEN_TAGS < <(git tag | grep ^broken/)
        git tag --delete "${BROKEN_TAGS[@]}"

        # unnamespaced tags get $DIR/ prefix
        for TAG in $(git tag | grep -v /); do
            git tag "$DIR/$TAG" "$TAG"
            git tag --delete "$TAG"
        done

        popd
    fi

    git remote add "$R" "$CDIR"
    git fetch "$R"
}

LIBYUI_REPOS=(
    libyui
    libyui-bindings
    libyui-rest-api
    libyui-ncurses          libyui-qt
                            libyui-qt-graph
    libyui-ncurses-pkg      libyui-qt-pkg
    libyui-ncurses-rest-api libyui-qt-rest-api
)

# short version for prototyping
# LIBYUI_REPOS=(libyui libyui-ncurses libyui-qt)

MSG="Empty initial commit"
if ! test -d .git; then
    git init .
    if [ "$(git config user.email)" = "martin@vidner.net" ]; then
        git config user.email mvidner@suse.com
    fi
    git commit --allow-empty -m "$MSG"
    git remote add origin git@github.com:mvidner/libyui-combined-alpha-3.git
fi
FIRST_COMMIT=$(git rev-list --max-count=1 --fixed-strings --grep="$MSG" HEAD)

merge_master() {
    for R in "${LIBYUI_REPOS[@]}"; do
        import https://github.com/libyui/"$R"

        git reset --hard "$FIRST_COMMIT"
        git commit --allow-empty -m "Empty parent commit for $R"
        EMPTY_PARENT=$(git rev-list --max-count=1 HEAD)

        BRANCH_INITIAL_COMMIT=$(git rev-list --max-parents=0 "$R"/master)
        git replace --graft "$BRANCH_INITIAL_COMMIT" "$EMPTY_PARENT"
    done
    git merge -m "Merge 'master' of all repositories" "${LIBYUI_REPOS[@]/%/\/master}"
}

merge_master
# now push master so that it becomes the default branch
git push origin master

# sed does
#   libyui/foo
#   libyui-qt/bar/baz
# ->
#   foo
#   bar/baz
BRANCHES=$(git branch --remotes | sed 's@[^/]*/@@' | sort --uniq)

branch_exists() {
    git rev-list --quiet "$1" -- 2>/dev/null
}

for B in $BRANCHES; do
    if branch_exists "$B"; then continue; fi

    ONE_REMOTE=$(git branch --remotes | sed -n "s@ *\([^/]*\)/$B\$@\1@;T;p;q")
    git switch --no-track --create "$B" "${ONE_REMOTE}"/"$B"
    mapfile -t BS < <(git branch --remotes --format='%(refname:short)' | grep "/$B$")
    git merge --ff -m "Merge '$B' of all repositories" "${BS[@]}"
done

# Unsuccessful tries to set the default branch without pushing master first:
# git symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/master
# or
# git remote set-head origin maste
# but it still does not change the remote end

git push --all origin
git push --tags origin
